{"version":3,"file":"static/js/666.caa8cfe3.chunk.js","mappings":"2OAsBMA,EAAgB,CACpBC,MAAO,IA4ET,UAzE2B,WACzB,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BD,EAAKG,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAoCJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,WACpB,IACMC,EADa,6BACQC,KAAKd,GAGhC,OADAS,EAAcI,EAAU,GAAK,uBACtBA,CACT,EAEME,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACbV,IAAgB,CAADQ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAGTC,EAAAA,EAAAA,IAAqBvB,GAAO,KAAD,EACjCU,EAAS,KACTc,EAAAA,GAAAA,QAAc,qCAAqCJ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEnDI,EAAAA,GAAAA,MAAY,mCAAkC,yBAAAJ,EAAAM,OAAA,GAAAP,EAAA,kBAGnD,kBAXe,OAAAH,EAAAW,MAAA,KAAAC,UAAA,KAahB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,UAAU,oBAAmBC,UACnCH,EAAAA,EAAAA,KAACI,EAAAA,GAAU,CAAAD,UACTH,EAAAA,EAAAA,KAACK,EAAAA,GAAgB,CAAAF,UACfH,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAAAH,UACVH,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CACLrC,cAAeA,EACfsC,SAAUtB,EACVuB,SAAU1B,EAAcoB,SAEvB,SAAAO,GAAA,IAAGxB,EAAUwB,EAAVxB,WAAYyB,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OAC7BC,EAAAA,EAAAA,MAACC,EAAAA,GAAQ,CAAAX,SAAA,EACPH,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CAAAZ,SAAC,qBACPU,EAAAA,EAAAA,MAACG,EAAAA,GAAc,CAAAb,SAAA,EACbH,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAACC,QAAQ,QAAOf,SAAC,sBACvBH,EAAAA,EAAAA,KAACmB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,GACJC,KAAK,QACLC,KAAK,QACLC,YAAY,SACZC,UAAWb,EAAQzC,OAASwC,EAAOxC,MACnCuD,UAAQ,EACRC,MAAOxD,EACPyD,SAAU,SAAAC,GAAC,OAAIrD,EAASqD,EAAEC,OAAOH,MAAM,EACvCI,OAAQ,WACNhD,GACF,IAEDJ,IAAcqB,EAAAA,EAAAA,KAACgC,EAAAA,GAAY,CAAA7B,SAAExB,KAC7BqB,EAAAA,EAAAA,KAACiC,EAAAA,GAAY,CAACV,KAAK,QAAQW,UAAWF,EAAAA,SAEzChC,EAAAA,EAAAA,KAACmC,EAAAA,GAAY,CAACb,KAAK,SAASd,SAAUtB,EAAWiB,SAAC,UAIlDH,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAACC,GAAG,UAASlC,SAAC,cAEd,WAQ3B,C","sources":["pages/ForgotPasswordPage/ForgotPasswordPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Formik, Field, ErrorMessage } from 'formik';\n\nimport {\n  Background,\n  BottleBackground,\n  FormSection,\n  MainForm,\n  Input,\n  Title,\n  MessageError,\n  Label,\n  SignInButton,\n  PageLink,\n  LableContainer,\n  Layout\n} from '../../components/AuthForm/AuthForm.styled';\nimport { requestResetPassword } from 'services/api/userAPI';\n\nimport { useNavigate } from 'react-router-dom';\n\nconst initialValues = {\n  email: '',\n};\n\nconst ForgotPasswordPage = () => {\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState('');\n\n  const navigate = useNavigate();\n\n  const validateEmail = () => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const isValid = emailRegex.test(email);\n\n    setEmailError(isValid ? '' : 'Enter a valid email');\n    return isValid;\n  };\n\n  const handleSend = async () => {\n    if (validateEmail()) {\n      \n      try {\n        await requestResetPassword(email);\n        navigate('/');\n        toast.success('Confirmation email has been sent!');\n      } catch (error) {\n        toast.error('User with this email not found!')\n      }\n    }\n  };\n\n  return (\n    <Layout className='static-background'>\n      <Background>\n        <BottleBackground>\n          <FormSection>\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSend}\n              validate={validateEmail}\n            >\n              {({ handleSend, errors, touched }) => (\n                <MainForm>\n                  <Title>Forgot Password</Title>\n                  <LableContainer>\n                    <Label htmlFor=\"email\">Enter your email</Label>\n                    <Field\n                      as={Input}\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"E-mail\"\n                      $hasError={touched.email && errors.email}\n                      required\n                      value={email}\n                      onChange={e => setEmail(e.target.value)}\n                      onBlur={() => {\n                        validateEmail();\n                      }}\n                    />\n                    {emailError && <MessageError>{emailError}</MessageError>}\n                    {<ErrorMessage name=\"email\" component={MessageError} />}\n                  </LableContainer>\n                  <SignInButton type=\"submit\" onSubmit={handleSend}>\n                    Send\n                  </SignInButton>\n\n                  <PageLink to=\"/signin\">Sign in</PageLink>\n\n                </MainForm>\n              )}\n            </Formik>\n          </FormSection>\n        </BottleBackground>\n      </Background>\n    </Layout>\n  );\n};\nexport default ForgotPasswordPage"],"names":["initialValues","email","_useState","useState","_useState2","_slicedToArray","setEmail","_useState3","_useState4","emailError","setEmailError","navigate","useNavigate","validateEmail","isValid","test","handleSend","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","requestResetPassword","toast","t0","stop","apply","arguments","_jsx","Layout","className","children","Background","BottleBackground","FormSection","Formik","onSubmit","validate","_ref2","errors","touched","_jsxs","MainForm","Title","LableContainer","Label","htmlFor","Field","as","Input","type","name","placeholder","$hasError","required","value","onChange","e","target","onBlur","MessageError","ErrorMessage","component","SignInButton","PageLink","to"],"sourceRoot":""}