{"version":3,"file":"static/js/660.ea1dd95b.chunk.js","mappings":"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","sources":["schemas/SignUpSchema.jsx","components/SignUpForm/SignUpForm.jsx","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const signUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Invalid email address'\n    )\n    .required('Email is required'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d]+$/,\n      'Password must include letters and numbers'\n    )\n    .min(8, 'Password is too short')\n    .max(64, 'Password is too long')\n    .required('Password is required'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Repeat password is required'),\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik, ErrorMessage, Field } from 'formik';\nimport iconSprite from '../../images/SVG/symbol-defs.svg';\nimport { signUpSchema } from 'schemas/SignUpSchema';\nimport {\n  Title,\n  MainForm,\n  Input,\n  SignInButton,\n  Label,\n  PageLink,\n  MessageError,\n  EyeIcon,\n  InputContainer,\n  Background,\n  BottleBackground,\n  FormSection,\n  Layout,\n  LabelDiv,\n} from '../AuthForm/AuthForm.styled';\nimport { selectIsLoading } from '../../redux/selectors';\nimport { signUpThunk } from '../../redux/users/usersOperations';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  repeatPassword: '',\n};\n\nexport const SignUpForm = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [repeatPasswordVisible, setRepeatPasswordVisible] = useState(false);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      const response = await dispatch(\n        signUpThunk({ email: values.email, password: values.password })\n      );\n      if (response.payload) {\n        setTimeout(() => {\n          if (response.payload.successful) {\n            navigate('/signin');\n          }\n        }, 3000);\n      } else {\n        console.error('Error during login:', response.error);\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const togglePasswordVisibility = field => {\n    if (field === 'password') {\n      setPasswordVisible(!passwordVisible);\n    } else if (field === 'repeatPassword') {\n      setRepeatPasswordVisible(!repeatPasswordVisible);\n    }\n  };\n\n  return (\n    <Layout className=\"static-background\">\n      <Background>\n        <BottleBackground>\n          <FormSection>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={signUpSchema}\n              onSubmit={handleSubmit}\n            >\n              {({ isSubmitting, errors, touched, values }) => (\n                <MainForm>\n                  <Title>Sign Up</Title>\n                  <LabelDiv>\n                    <Label htmlFor=\"email\">Enter your email</Label>\n                    <Field\n                      as={Input}\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"E-mail\"\n                      $hasError={touched.email && errors.email}\n                      value={values.email}\n                      required\n                    />\n                    <ErrorMessage name=\"email\" component={MessageError} />\n                  </LabelDiv>\n\n                  <LabelDiv>\n                    <Label htmlFor=\"password\">Enter your password</Label>\n                    <InputContainer>\n                      <Field\n                        as={Input}\n                        type={passwordVisible ? 'text' : 'password'}\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        $hasError={touched.password && errors.password}\n                        value={values.password}\n                        required\n                      />\n                      <span\n                        onClick={() => togglePasswordVisibility('password')}\n                      >\n                        {passwordVisible ? (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye'} />\n                            </svg>\n                          </EyeIcon>\n                        ) : (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye-slash'} />\n                            </svg>\n                          </EyeIcon>\n                        )}\n                      </span>\n                    </InputContainer>\n                    <ErrorMessage name=\"password\" component={MessageError} />\n                  </LabelDiv>\n\n                  <LabelDiv>\n                    <Label htmlFor=\"repeatPassword\">Repeat password</Label>\n                    <InputContainer>\n                      <Field\n                        as={Input}\n                        type={repeatPasswordVisible ? 'text' : 'password'}\n                        name=\"repeatPassword\"\n                        placeholder=\"Repeat password\"\n                        $hasError={\n                          touched.repeatPassword && errors.repeatPassword\n                        }\n                        value={values.repeatPassword}\n                        required\n                      />\n                      <span\n                        onClick={() =>\n                          togglePasswordVisibility('repeatPassword')\n                        }\n                      >\n                        {repeatPasswordVisible ? (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye'} />\n                            </svg>\n                          </EyeIcon>\n                        ) : (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye-slash'} />\n                            </svg>\n                          </EyeIcon>\n                        )}\n                      </span>\n                    </InputContainer>\n                    <ErrorMessage\n                      name=\"repeatPassword\"\n                      component={MessageError}\n                    />\n                  </LabelDiv>\n\n                  <SignInButton\n                    type=\"submit\"\n                    disabled={isSubmitting || isLoading}\n                  >\n                    Sign Up\n                  </SignInButton>\n\n                  <PageLink to=\"/signin\">Sign in</PageLink>\n                </MainForm>\n              )}\n            </Formik>\n          </FormSection>\n        </BottleBackground>\n      </Background>\n    </Layout>\n  );\n};\n","import { SignUpForm } from 'components/SignUpForm/SignUpForm';\n\nexport default function SignUp() {\n  return <SignUpForm />;\n}\n"],"names":["signUpSchema","Yup","shape","email","matches","required","password","min","max","repeatPassword","oneOf","initialValues","SignUpForm","isLoading","useSelector","selectIsLoading","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","repeatPasswordVisible","setRepeatPasswordVisible","navigate","useNavigate","dispatch","useDispatch","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref","setSubmitting","response","_context","prev","next","signUpThunk","sent","payload","setTimeout","successful","console","error","t0","finish","stop","_x","_x2","apply","arguments","togglePasswordVisibility","field","_jsx","Layout","className","children","Background","BottleBackground","FormSection","Formik","validationSchema","onSubmit","_ref3","isSubmitting","errors","touched","_jsxs","MainForm","Title","LabelDiv","Label","htmlFor","Field","as","Input","type","name","placeholder","$hasError","value","ErrorMessage","component","MessageError","InputContainer","onClick","EyeIcon","href","iconSprite","SignInButton","disabled","PageLink","to","SignUp"],"sourceRoot":""}