{"version":3,"file":"static/js/863.e47c96b7.chunk.js","mappings":"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","sources":["schemas/SignInSchema.jsx","components/AuthForm/AuthForm.jsx","pages/SignInPage/SignInPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const signInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required'),\n});\n","import React, { useState } from 'react';\nimport { ErrorMessage, Formik, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport iconSprite from '../../images/SVG/symbol-defs.svg';\n\nimport {\n  Title,\n  MainForm,\n  Input,\n  SignInButton,\n  Label,\n  PageLink,\n  MessageError,\n  EyeIcon,\n  InputContainer,\n  Background,\n  BottleBackground,\n  FormSection,\n  Layout,\n  LabelDiv,\n} from './AuthForm.styled';\nimport { signInSchema } from 'schemas/SignInSchema';\nimport { signInThunk } from '../../redux/users/usersOperations';\nimport { selectIsLoading } from '../../redux/selectors';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const AuthForm = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      const response = await dispatch(\n        signInThunk({ email: values.email, password: values.password })\n      );\n      if (!response.error) {\n      }\n    } catch (error) {\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  return (\n    <Layout className=\"static-background\">\n      <Background>\n        <BottleBackground>\n          <FormSection>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={signInSchema}\n              onSubmit={handleSubmit}\n            >\n              {({ isSubmitting, errors, touched }) => (\n                <MainForm>\n                  <Title>Sign In</Title>\n                  <LabelDiv>\n                    <Label htmlFor=\"firstName\">Enter your email</Label>\n                    <Field\n                      as={Input}\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"E-mail\"\n                      $hasError={touched.email && errors.email}\n                      required\n                    />\n                    <ErrorMessage name=\"email\" component={MessageError} />\n                  </LabelDiv>\n                  <LabelDiv>\n                    <Label htmlFor=\"lastName\">Enter your password </Label>\n                    <InputContainer>\n                      <Field\n                        as={Input}\n                        type={passwordVisible ? 'text' : 'password'}\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        $hasError={touched.password && errors.password}\n                        required\n                      />\n                      <span onClick={togglePasswordVisibility}>\n                        {passwordVisible ? (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye'} />\n                            </svg>\n                          </EyeIcon>\n                        ) : (\n                          <EyeIcon>\n                            <svg>\n                              <use href={iconSprite + '#icon-eye-slash'} />\n                            </svg>\n                          </EyeIcon>\n                        )}\n                      </span>\n                    </InputContainer>\n                    <ErrorMessage name=\"password\" component={MessageError} />\n                  </LabelDiv>\n                  <SignInButton\n                    type=\"submit\"\n                    disabled={isSubmitting || isLoading}\n                  >\n                    Sign In\n                  </SignInButton>\n\n                  <PageLink to=\"/forgot-password\">Forgot password?</PageLink>\n                  <PageLink to=\"/signup\">Sign up</PageLink>\n                </MainForm>\n              )}\n            </Formik>\n          </FormSection>\n        </BottleBackground>\n      </Background>\n    </Layout>\n  );\n};\n","import { AuthForm } from 'components/AuthForm/AuthForm';\n\nexport default function SignIn() {\n  return <AuthForm />;\n}\n"],"names":["signInSchema","Yup","shape","email","matches","required","password","initialValues","AuthForm","isLoading","useSelector","selectIsLoading","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","dispatch","useDispatch","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref","setSubmitting","_context","prev","next","signInThunk","sent","error","t0","finish","stop","_x","_x2","apply","arguments","togglePasswordVisibility","_jsx","Layout","className","children","Background","BottleBackground","FormSection","Formik","validationSchema","onSubmit","_ref3","isSubmitting","errors","touched","_jsxs","MainForm","Title","LabelDiv","Label","htmlFor","Field","as","Input","type","name","placeholder","$hasError","ErrorMessage","component","MessageError","InputContainer","onClick","EyeIcon","href","iconSprite","SignInButton","disabled","PageLink","to","SignIn"],"sourceRoot":""}